@*@model IEnumerable<VGB.Models.PackingList>

    @{
        ViewBag.Title = "PackingListData";
    }

    <h2>PackingListData</h2>

    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.S_No)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Item)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Roll_No)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Colour)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Gsm)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Width)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RollStatus)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.NetWt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Remarks)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.JobWork.Created_By)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.S_No)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Item)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Roll_No)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Colour)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gsm)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Width)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RollStatus)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NetWt)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remarks)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.JobWork.Created_By)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }

    </table>*@


<html>
<head>
    <style>
        a,
        a label {
            cursor: pointer;
        }

        /* Styles for the drop-down. Feel free to change the styles to suit your website. */

        
    </style>
</head>
<body>
    <table id="PakingLists" class="table table-striped table-bordered" style="width:100%">
        <thead>
            <tr>
                <th>S_No</th>
                <th>Item</th>
                <th>Roll_No</th>
                <th>Colour</th>
                <th>Gsm</th>
                <th>Width</th>
                <th>RollStatus</th>
                <th>NetWt</th>
                <th>Remarks</th>
            </tr>
        </thead>
    </table>






    <script>
        $(document).ready(function () {
            debugger;
            $("#PakingLists").DataTable({
                "ajax": {
                    "url": "/PackingLists/GetpakingList",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "S_No" },
                    { "data": "Item" },
                    { "data": "Roll_No" },
                    { "data": "Colour" },
                    { "data": "Gsm" },
                    { "data": "Width" },
                    {
                        "data": "RollStatus",
                        "orderable": false,
                        "searchable": false,
                        "render": function (data, type, row, meta) {
                            debugger;
                            if (data.trim() == "Open") {
                                var a = '<a onclick="GetSelectedRow(\'' + row.Id + '\')">' + data + '</a>'
                                return a;
                            }
                            else {
                                return data;
                            }

                        }
                    },
                    { "data": "NetWt" },
                    { "data": "Remarks" }],
                scrollY: true,
                deferRender: true,
                scroller: true,
                scrollX: true,
                scrollCollapse: true,
                select: true,
                initComplete: function () {
                    debugger;
                    this.api().columns().every(function () {
                        var column = this;
                        var ddmenu = cbDropdown($(column.header()))
                            .on('change', ':checkbox', function () {
                                var vals = $(':checked', ddmenu).map(function (index, element) {
                                    return $.fn.dataTable.util.escapeRegex($(element).val());
                                }).toArray().join('|');

                                column
                                    .search(vals.length > 0 ? '^(' + vals + ')$' : '', true, false)
                                    .draw();
                                //console.log(vals);
                                if (vals === "") {
                                    $(this).parent().parent().parent().removeClass("factive");
                                } else {
                                    $(this).parent().parent().parent().addClass("factive");
                                }
                                //change callback
                            });

                        column.data().unique().sort().each(function (d, j) {
                            var // wrapped
                                $label = $('<label>'),
                                $text = $('<span>', {
                                    text: d
                                }),
                                $cb = $('<input>', {
                                    type: 'checkbox',
                                    value: d
                                });

                            $text.appendTo($label);
                            $cb.appendTo($label);

                            ddmenu.append($('<li>').append($label));
                        });
                    });
                }
            });
        });
        function GetSelectedRow(id) {
            debugger;
            var message = "Do you want the change Roll status to Close";
            var res = window.confirm(message);
            if (res) {
                var url = window.location.href.substring(0, window.location.href.indexOf('/') + 1);
                window.location.replace(url + "PackingLists/ChangeRollStatus?id=" + id);
            }
            return false;
        }
        function cbDropdown(column) {
            return $('<ul>', {
                'class': 'cb-dropdown'
            }).appendTo($('<div>', {
                'class': 'cb-dropdown-wrap'
            }).appendTo(column));
        }
        $(".cb-dropdown-wrap").each(function () {
            console.log($(this).parent().width());
            $(this).width($(this).parent().width());
        });
    </script>
</body>
</html>


